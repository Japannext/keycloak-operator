//go:build !ignore_autogenerated

/*
Copyright 2024 Japannext.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package gocloak

import ()

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AggregatedPolicyRepresentation) DeepCopyInto(out *AggregatedPolicyRepresentation) {
	*out = *in
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AggregatedPolicyRepresentation.
func (in *AggregatedPolicyRepresentation) DeepCopy() *AggregatedPolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(AggregatedPolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Client) DeepCopyInto(out *Client) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = new(map[string]bool)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]bool, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.AdminURL != nil {
		in, out := &in.AdminURL, &out.AdminURL
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.AuthenticationFlowBindingOverrides != nil {
		in, out := &in.AuthenticationFlowBindingOverrides, &out.AuthenticationFlowBindingOverrides
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.AuthorizationServicesEnabled != nil {
		in, out := &in.AuthorizationServicesEnabled, &out.AuthorizationServicesEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AuthorizationSettings != nil {
		in, out := &in.AuthorizationSettings, &out.AuthorizationSettings
		*out = new(ResourceServerRepresentation)
		(*in).DeepCopyInto(*out)
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		*out = new(string)
		**out = **in
	}
	if in.BearerOnly != nil {
		in, out := &in.BearerOnly, &out.BearerOnly
		*out = new(bool)
		**out = **in
	}
	if in.ClientAuthenticatorType != nil {
		in, out := &in.ClientAuthenticatorType, &out.ClientAuthenticatorType
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
	if in.DefaultClientScopes != nil {
		in, out := &in.DefaultClientScopes, &out.DefaultClientScopes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectAccessGrantsEnabled != nil {
		in, out := &in.DirectAccessGrantsEnabled, &out.DirectAccessGrantsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FrontChannelLogout != nil {
		in, out := &in.FrontChannelLogout, &out.FrontChannelLogout
		*out = new(bool)
		**out = **in
	}
	if in.FullScopeAllowed != nil {
		in, out := &in.FullScopeAllowed, &out.FullScopeAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImplicitFlowEnabled != nil {
		in, out := &in.ImplicitFlowEnabled, &out.ImplicitFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeReRegistrationTimeout != nil {
		in, out := &in.NodeReRegistrationTimeout, &out.NodeReRegistrationTimeout
		*out = new(int32)
		**out = **in
	}
	if in.NotBefore != nil {
		in, out := &in.NotBefore, &out.NotBefore
		*out = new(int32)
		**out = **in
	}
	if in.OptionalClientScopes != nil {
		in, out := &in.OptionalClientScopes, &out.OptionalClientScopes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Origin != nil {
		in, out := &in.Origin, &out.Origin
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ProtocolMappers != nil {
		in, out := &in.ProtocolMappers, &out.ProtocolMappers
		*out = new([]ProtocolMapper)
		if **in != nil {
			in, out := *in, *out
			*out = make([]ProtocolMapper, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.PublicClient != nil {
		in, out := &in.PublicClient, &out.PublicClient
		*out = new(bool)
		**out = **in
	}
	if in.RedirectURIs != nil {
		in, out := &in.RedirectURIs, &out.RedirectURIs
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.RegisteredNodes != nil {
		in, out := &in.RegisteredNodes, &out.RegisteredNodes
		*out = new(map[string]int)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]int, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.RegistrationAccessToken != nil {
		in, out := &in.RegistrationAccessToken, &out.RegistrationAccessToken
		*out = new(string)
		**out = **in
	}
	if in.RootURL != nil {
		in, out := &in.RootURL, &out.RootURL
		*out = new(string)
		**out = **in
	}
	if in.Secret != nil {
		in, out := &in.Secret, &out.Secret
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountsEnabled != nil {
		in, out := &in.ServiceAccountsEnabled, &out.ServiceAccountsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.StandardFlowEnabled != nil {
		in, out := &in.StandardFlowEnabled, &out.StandardFlowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SurrogateAuthRequired != nil {
		in, out := &in.SurrogateAuthRequired, &out.SurrogateAuthRequired
		*out = new(bool)
		**out = **in
	}
	if in.WebOrigins != nil {
		in, out := &in.WebOrigins, &out.WebOrigins
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Client.
func (in *Client) DeepCopy() *Client {
	if in == nil {
		return nil
	}
	out := new(Client)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClientPolicyRepresentation) DeepCopyInto(out *ClientPolicyRepresentation) {
	*out = *in
	if in.Clients != nil {
		in, out := &in.Clients, &out.Clients
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClientPolicyRepresentation.
func (in *ClientPolicyRepresentation) DeepCopy() *ClientPolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(ClientPolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClientScope) DeepCopyInto(out *ClientScope) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ClientScopeAttributes != nil {
		in, out := &in.ClientScopeAttributes, &out.ClientScopeAttributes
		*out = new(ClientScopeAttributes)
		(*in).DeepCopyInto(*out)
	}
	if in.ProtocolMappers != nil {
		in, out := &in.ProtocolMappers, &out.ProtocolMappers
		*out = new([]ProtocolMapper)
		if **in != nil {
			in, out := *in, *out
			*out = make([]ProtocolMapper, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClientScope.
func (in *ClientScope) DeepCopy() *ClientScope {
	if in == nil {
		return nil
	}
	out := new(ClientScope)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClientScopeAttributes) DeepCopyInto(out *ClientScopeAttributes) {
	*out = *in
	if in.ConsentScreenText != nil {
		in, out := &in.ConsentScreenText, &out.ConsentScreenText
		*out = new(string)
		**out = **in
	}
	if in.DisplayOnConsentScreen != nil {
		in, out := &in.DisplayOnConsentScreen, &out.DisplayOnConsentScreen
		*out = new(string)
		**out = **in
	}
	if in.IncludeInTokenScope != nil {
		in, out := &in.IncludeInTokenScope, &out.IncludeInTokenScope
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClientScopeAttributes.
func (in *ClientScopeAttributes) DeepCopy() *ClientScopeAttributes {
	if in == nil {
		return nil
	}
	out := new(ClientScopeAttributes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompositesRepresentation) DeepCopyInto(out *CompositesRepresentation) {
	*out = *in
	if in.Client != nil {
		in, out := &in.Client, &out.Client
		*out = new(map[string][]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string][]string, len(*in))
			for key, val := range *in {
				var outVal []string
				if val == nil {
					(*out)[key] = nil
				} else {
					inVal := (*in)[key]
					in, out := &inVal, &outVal
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
				(*out)[key] = outVal
			}
		}
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompositesRepresentation.
func (in *CompositesRepresentation) DeepCopy() *CompositesRepresentation {
	if in == nil {
		return nil
	}
	out := new(CompositesRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupDefinition) DeepCopyInto(out *GroupDefinition) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.ExtendChildren != nil {
		in, out := &in.ExtendChildren, &out.ExtendChildren
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupDefinition.
func (in *GroupDefinition) DeepCopy() *GroupDefinition {
	if in == nil {
		return nil
	}
	out := new(GroupDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupPolicyRepresentation) DeepCopyInto(out *GroupPolicyRepresentation) {
	*out = *in
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = new([]GroupDefinition)
		if **in != nil {
			in, out := *in, *out
			*out = make([]GroupDefinition, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.GroupsClaim != nil {
		in, out := &in.GroupsClaim, &out.GroupsClaim
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupPolicyRepresentation.
func (in *GroupPolicyRepresentation) DeepCopy() *GroupPolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(GroupPolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JSPolicyRepresentation) DeepCopyInto(out *JSPolicyRepresentation) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JSPolicyRepresentation.
func (in *JSPolicyRepresentation) DeepCopy() *JSPolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(JSPolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyRepresentation) DeepCopyInto(out *PolicyRepresentation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.DecisionStrategy != nil {
		in, out := &in.DecisionStrategy, &out.DecisionStrategy
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Logic != nil {
		in, out := &in.Logic, &out.Logic
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyRepresentation.
func (in *PolicyRepresentation) DeepCopy() *PolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(PolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProtocolMapper) DeepCopyInto(out *ProtocolMapper) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ProtocolMapper != nil {
		in, out := &in.ProtocolMapper, &out.ProtocolMapper
		*out = new(string)
		**out = **in
	}
	if in.ConsentRequired != nil {
		in, out := &in.ConsentRequired, &out.ConsentRequired
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProtocolMapper.
func (in *ProtocolMapper) DeepCopy() *ProtocolMapper {
	if in == nil {
		return nil
	}
	out := new(ProtocolMapper)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmRepresentation) DeepCopyInto(out *RealmRepresentation) {
	*out = *in
	if in.AccessCodeLifespan != nil {
		in, out := &in.AccessCodeLifespan, &out.AccessCodeLifespan
		*out = new(int)
		**out = **in
	}
	if in.AccessCodeLifespanLogin != nil {
		in, out := &in.AccessCodeLifespanLogin, &out.AccessCodeLifespanLogin
		*out = new(int)
		**out = **in
	}
	if in.AccessCodeLifespanUserAction != nil {
		in, out := &in.AccessCodeLifespanUserAction, &out.AccessCodeLifespanUserAction
		*out = new(int)
		**out = **in
	}
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(int)
		**out = **in
	}
	if in.AccessTokenLifespanForImplicitFlow != nil {
		in, out := &in.AccessTokenLifespanForImplicitFlow, &out.AccessTokenLifespanForImplicitFlow
		*out = new(int)
		**out = **in
	}
	if in.AccountTheme != nil {
		in, out := &in.AccountTheme, &out.AccountTheme
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByAdminLifespan != nil {
		in, out := &in.ActionTokenGeneratedByAdminLifespan, &out.ActionTokenGeneratedByAdminLifespan
		*out = new(int)
		**out = **in
	}
	if in.ActionTokenGeneratedByUserLifespan != nil {
		in, out := &in.ActionTokenGeneratedByUserLifespan, &out.ActionTokenGeneratedByUserLifespan
		*out = new(int)
		**out = **in
	}
	if in.AdminEventsDetailsEnabled != nil {
		in, out := &in.AdminEventsDetailsEnabled, &out.AdminEventsDetailsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AdminEventsEnabled != nil {
		in, out := &in.AdminEventsEnabled, &out.AdminEventsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AdminTheme != nil {
		in, out := &in.AdminTheme, &out.AdminTheme
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.BrowserFlow != nil {
		in, out := &in.BrowserFlow, &out.BrowserFlow
		*out = new(string)
		**out = **in
	}
	if in.BrowserSecurityHeaders != nil {
		in, out := &in.BrowserSecurityHeaders, &out.BrowserSecurityHeaders
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.BruteForceProtected != nil {
		in, out := &in.BruteForceProtected, &out.BruteForceProtected
		*out = new(bool)
		**out = **in
	}
	if in.ClientAuthenticationFlow != nil {
		in, out := &in.ClientAuthenticationFlow, &out.ClientAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.DefaultDefaultClientScopes != nil {
		in, out := &in.DefaultDefaultClientScopes, &out.DefaultDefaultClientScopes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.DefaultGroups != nil {
		in, out := &in.DefaultGroups, &out.DefaultGroups
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.DefaultLocale != nil {
		in, out := &in.DefaultLocale, &out.DefaultLocale
		*out = new(string)
		**out = **in
	}
	if in.DefaultOptionalClientScopes != nil {
		in, out := &in.DefaultOptionalClientScopes, &out.DefaultOptionalClientScopes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.DefaultRole != nil {
		in, out := &in.DefaultRole, &out.DefaultRole
		*out = new(Role)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultRoles != nil {
		in, out := &in.DefaultRoles, &out.DefaultRoles
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.DefaultSignatureAlgorithm != nil {
		in, out := &in.DefaultSignatureAlgorithm, &out.DefaultSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantFlow != nil {
		in, out := &in.DirectGrantFlow, &out.DirectGrantFlow
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.DisplayNameHTML != nil {
		in, out := &in.DisplayNameHTML, &out.DisplayNameHTML
		*out = new(string)
		**out = **in
	}
	if in.DockerAuthenticationFlow != nil {
		in, out := &in.DockerAuthenticationFlow, &out.DockerAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.DuplicateEmailsAllowed != nil {
		in, out := &in.DuplicateEmailsAllowed, &out.DuplicateEmailsAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EditUsernameAllowed != nil {
		in, out := &in.EditUsernameAllowed, &out.EditUsernameAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EmailTheme != nil {
		in, out := &in.EmailTheme, &out.EmailTheme
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EnabledEventTypes != nil {
		in, out := &in.EnabledEventTypes, &out.EnabledEventTypes
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.EventsEnabled != nil {
		in, out := &in.EventsEnabled, &out.EventsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EventsExpiration != nil {
		in, out := &in.EventsExpiration, &out.EventsExpiration
		*out = new(int64)
		**out = **in
	}
	if in.EventsListeners != nil {
		in, out := &in.EventsListeners, &out.EventsListeners
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.FailureFactor != nil {
		in, out := &in.FailureFactor, &out.FailureFactor
		*out = new(int)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InternationalizationEnabled != nil {
		in, out := &in.InternationalizationEnabled, &out.InternationalizationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.KeycloakVersion != nil {
		in, out := &in.KeycloakVersion, &out.KeycloakVersion
		*out = new(string)
		**out = **in
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LoginWithEmailAllowed != nil {
		in, out := &in.LoginWithEmailAllowed, &out.LoginWithEmailAllowed
		*out = new(bool)
		**out = **in
	}
	if in.MaxDeltaTimeSeconds != nil {
		in, out := &in.MaxDeltaTimeSeconds, &out.MaxDeltaTimeSeconds
		*out = new(int)
		**out = **in
	}
	if in.MaxFailureWaitSeconds != nil {
		in, out := &in.MaxFailureWaitSeconds, &out.MaxFailureWaitSeconds
		*out = new(int)
		**out = **in
	}
	if in.MinimumQuickLoginWaitSeconds != nil {
		in, out := &in.MinimumQuickLoginWaitSeconds, &out.MinimumQuickLoginWaitSeconds
		*out = new(int)
		**out = **in
	}
	if in.NotBefore != nil {
		in, out := &in.NotBefore, &out.NotBefore
		*out = new(int)
		**out = **in
	}
	if in.OfflineSessionIdleTimeout != nil {
		in, out := &in.OfflineSessionIdleTimeout, &out.OfflineSessionIdleTimeout
		*out = new(int)
		**out = **in
	}
	if in.OfflineSessionMaxLifespan != nil {
		in, out := &in.OfflineSessionMaxLifespan, &out.OfflineSessionMaxLifespan
		*out = new(int)
		**out = **in
	}
	if in.OfflineSessionMaxLifespanEnabled != nil {
		in, out := &in.OfflineSessionMaxLifespanEnabled, &out.OfflineSessionMaxLifespanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OtpPolicyAlgorithm != nil {
		in, out := &in.OtpPolicyAlgorithm, &out.OtpPolicyAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.OtpPolicyDigits != nil {
		in, out := &in.OtpPolicyDigits, &out.OtpPolicyDigits
		*out = new(int)
		**out = **in
	}
	if in.OtpPolicyInitialCounter != nil {
		in, out := &in.OtpPolicyInitialCounter, &out.OtpPolicyInitialCounter
		*out = new(int)
		**out = **in
	}
	if in.OtpPolicyLookAheadWindow != nil {
		in, out := &in.OtpPolicyLookAheadWindow, &out.OtpPolicyLookAheadWindow
		*out = new(int)
		**out = **in
	}
	if in.OtpPolicyPeriod != nil {
		in, out := &in.OtpPolicyPeriod, &out.OtpPolicyPeriod
		*out = new(int)
		**out = **in
	}
	if in.OtpPolicyType != nil {
		in, out := &in.OtpPolicyType, &out.OtpPolicyType
		*out = new(string)
		**out = **in
	}
	if in.OtpSupportedApplications != nil {
		in, out := &in.OtpSupportedApplications, &out.OtpSupportedApplications
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.PermanentLockout != nil {
		in, out := &in.PermanentLockout, &out.PermanentLockout
		*out = new(bool)
		**out = **in
	}
	if in.QuickLoginCheckMilliSeconds != nil {
		in, out := &in.QuickLoginCheckMilliSeconds, &out.QuickLoginCheckMilliSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = new(string)
		**out = **in
	}
	if in.RefreshTokenMaxReuse != nil {
		in, out := &in.RefreshTokenMaxReuse, &out.RefreshTokenMaxReuse
		*out = new(int)
		**out = **in
	}
	if in.RegistrationAllowed != nil {
		in, out := &in.RegistrationAllowed, &out.RegistrationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationEmailAsUsername != nil {
		in, out := &in.RegistrationEmailAsUsername, &out.RegistrationEmailAsUsername
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationFlow != nil {
		in, out := &in.RegistrationFlow, &out.RegistrationFlow
		*out = new(string)
		**out = **in
	}
	if in.RememberMe != nil {
		in, out := &in.RememberMe, &out.RememberMe
		*out = new(bool)
		**out = **in
	}
	if in.ResetCredentialsFlow != nil {
		in, out := &in.ResetCredentialsFlow, &out.ResetCredentialsFlow
		*out = new(string)
		**out = **in
	}
	if in.ResetPasswordAllowed != nil {
		in, out := &in.ResetPasswordAllowed, &out.ResetPasswordAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RevokeRefreshToken != nil {
		in, out := &in.RevokeRefreshToken, &out.RevokeRefreshToken
		*out = new(bool)
		**out = **in
	}
	if in.SMTPServer != nil {
		in, out := &in.SMTPServer, &out.SMTPServer
		*out = new(map[string]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string]string, len(*in))
			for key, val := range *in {
				(*out)[key] = val
			}
		}
	}
	if in.SslRequired != nil {
		in, out := &in.SslRequired, &out.SslRequired
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionIdleTimeout != nil {
		in, out := &in.SsoSessionIdleTimeout, &out.SsoSessionIdleTimeout
		*out = new(int)
		**out = **in
	}
	if in.SsoSessionIdleTimeoutRememberMe != nil {
		in, out := &in.SsoSessionIdleTimeoutRememberMe, &out.SsoSessionIdleTimeoutRememberMe
		*out = new(int)
		**out = **in
	}
	if in.SsoSessionMaxLifespan != nil {
		in, out := &in.SsoSessionMaxLifespan, &out.SsoSessionMaxLifespan
		*out = new(int)
		**out = **in
	}
	if in.SsoSessionMaxLifespanRememberMe != nil {
		in, out := &in.SsoSessionMaxLifespanRememberMe, &out.SsoSessionMaxLifespanRememberMe
		*out = new(int)
		**out = **in
	}
	if in.SupportedLocales != nil {
		in, out := &in.SupportedLocales, &out.SupportedLocales
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.UserManagedAccessAllowed != nil {
		in, out := &in.UserManagedAccessAllowed, &out.UserManagedAccessAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VerifyEmail != nil {
		in, out := &in.VerifyEmail, &out.VerifyEmail
		*out = new(bool)
		**out = **in
	}
	if in.WaitIncrementSeconds != nil {
		in, out := &in.WaitIncrementSeconds, &out.WaitIncrementSeconds
		*out = new(int)
		**out = **in
	}
	if in.WebAuthnPolicyAcceptableAaguids != nil {
		in, out := &in.WebAuthnPolicyAcceptableAaguids, &out.WebAuthnPolicyAcceptableAaguids
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.WebAuthnPolicyAttestationConveyancePreference != nil {
		in, out := &in.WebAuthnPolicyAttestationConveyancePreference, &out.WebAuthnPolicyAttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyAuthenticatorAttachment != nil {
		in, out := &in.WebAuthnPolicyAuthenticatorAttachment, &out.WebAuthnPolicyAuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyAvoidSameAuthenticatorRegister != nil {
		in, out := &in.WebAuthnPolicyAvoidSameAuthenticatorRegister, &out.WebAuthnPolicyAvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPolicyCreateTimeout != nil {
		in, out := &in.WebAuthnPolicyCreateTimeout, &out.WebAuthnPolicyCreateTimeout
		*out = new(int)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessAcceptableAaguids != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAcceptableAaguids, &out.WebAuthnPolicyPasswordlessAcceptableAaguids
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.WebAuthnPolicyPasswordlessAttestationConveyancePreference != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAttestationConveyancePreference, &out.WebAuthnPolicyPasswordlessAttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessAuthenticatorAttachment != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAuthenticatorAttachment, &out.WebAuthnPolicyPasswordlessAuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister != nil {
		in, out := &in.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister, &out.WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessCreateTimeout != nil {
		in, out := &in.WebAuthnPolicyPasswordlessCreateTimeout, &out.WebAuthnPolicyPasswordlessCreateTimeout
		*out = new(int)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessRequireResidentKey != nil {
		in, out := &in.WebAuthnPolicyPasswordlessRequireResidentKey, &out.WebAuthnPolicyPasswordlessRequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessRpEntityName != nil {
		in, out := &in.WebAuthnPolicyPasswordlessRpEntityName, &out.WebAuthnPolicyPasswordlessRpEntityName
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessRpID != nil {
		in, out := &in.WebAuthnPolicyPasswordlessRpID, &out.WebAuthnPolicyPasswordlessRpID
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyPasswordlessSignatureAlgorithms != nil {
		in, out := &in.WebAuthnPolicyPasswordlessSignatureAlgorithms, &out.WebAuthnPolicyPasswordlessSignatureAlgorithms
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.WebAuthnPolicyPasswordlessUserVerificationRequirement != nil {
		in, out := &in.WebAuthnPolicyPasswordlessUserVerificationRequirement, &out.WebAuthnPolicyPasswordlessUserVerificationRequirement
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyRequireResidentKey != nil {
		in, out := &in.WebAuthnPolicyRequireResidentKey, &out.WebAuthnPolicyRequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyRpEntityName != nil {
		in, out := &in.WebAuthnPolicyRpEntityName, &out.WebAuthnPolicyRpEntityName
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicyRpID != nil {
		in, out := &in.WebAuthnPolicyRpID, &out.WebAuthnPolicyRpID
		*out = new(string)
		**out = **in
	}
	if in.WebAuthnPolicySignatureAlgorithms != nil {
		in, out := &in.WebAuthnPolicySignatureAlgorithms, &out.WebAuthnPolicySignatureAlgorithms
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.WebAuthnPolicyUserVerificationRequirement != nil {
		in, out := &in.WebAuthnPolicyUserVerificationRequirement, &out.WebAuthnPolicyUserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmRepresentation.
func (in *RealmRepresentation) DeepCopy() *RealmRepresentation {
	if in == nil {
		return nil
	}
	out := new(RealmRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceOwnerRepresentation) DeepCopyInto(out *ResourceOwnerRepresentation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceOwnerRepresentation.
func (in *ResourceOwnerRepresentation) DeepCopy() *ResourceOwnerRepresentation {
	if in == nil {
		return nil
	}
	out := new(ResourceOwnerRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceRepresentation) DeepCopyInto(out *ResourceRepresentation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = new(map[string][]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string][]string, len(*in))
			for key, val := range *in {
				var outVal []string
				if val == nil {
					(*out)[key] = nil
				} else {
					inVal := (*in)[key]
					in, out := &inVal, &outVal
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
				(*out)[key] = outVal
			}
		}
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.IconURI != nil {
		in, out := &in.IconURI, &out.IconURI
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(ResourceOwnerRepresentation)
		(*in).DeepCopyInto(*out)
	}
	if in.OwnerManagedAccess != nil {
		in, out := &in.OwnerManagedAccess, &out.OwnerManagedAccess
		*out = new(bool)
		**out = **in
	}
	if in.ResourceScopes != nil {
		in, out := &in.ResourceScopes, &out.ResourceScopes
		*out = new([]ScopeRepresentation)
		if **in != nil {
			in, out := *in, *out
			*out = make([]ScopeRepresentation, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URIs != nil {
		in, out := &in.URIs, &out.URIs
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceRepresentation.
func (in *ResourceRepresentation) DeepCopy() *ResourceRepresentation {
	if in == nil {
		return nil
	}
	out := new(ResourceRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceServerRepresentation) DeepCopyInto(out *ResourceServerRepresentation) {
	*out = *in
	if in.AllowRemoteResourceManagement != nil {
		in, out := &in.AllowRemoteResourceManagement, &out.AllowRemoteResourceManagement
		*out = new(bool)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = new([]PolicyRepresentation)
		if **in != nil {
			in, out := *in, *out
			*out = make([]PolicyRepresentation, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.PolicyEnforcementMode != nil {
		in, out := &in.PolicyEnforcementMode, &out.PolicyEnforcementMode
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new([]ResourceRepresentation)
		if **in != nil {
			in, out := *in, *out
			*out = make([]ResourceRepresentation, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = new([]ScopeRepresentation)
		if **in != nil {
			in, out := *in, *out
			*out = make([]ScopeRepresentation, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
	if in.DecisionStrategy != nil {
		in, out := &in.DecisionStrategy, &out.DecisionStrategy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceServerRepresentation.
func (in *ResourceServerRepresentation) DeepCopy() *ResourceServerRepresentation {
	if in == nil {
		return nil
	}
	out := new(ResourceServerRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Role) DeepCopyInto(out *Role) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScopeParamRequired != nil {
		in, out := &in.ScopeParamRequired, &out.ScopeParamRequired
		*out = new(bool)
		**out = **in
	}
	if in.Composite != nil {
		in, out := &in.Composite, &out.Composite
		*out = new(bool)
		**out = **in
	}
	if in.Composites != nil {
		in, out := &in.Composites, &out.Composites
		*out = new(CompositesRepresentation)
		(*in).DeepCopyInto(*out)
	}
	if in.ClientRole != nil {
		in, out := &in.ClientRole, &out.ClientRole
		*out = new(bool)
		**out = **in
	}
	if in.ContainerID != nil {
		in, out := &in.ContainerID, &out.ContainerID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = new(map[string][]string)
		if **in != nil {
			in, out := *in, *out
			*out = make(map[string][]string, len(*in))
			for key, val := range *in {
				var outVal []string
				if val == nil {
					(*out)[key] = nil
				} else {
					inVal := (*in)[key]
					in, out := &inVal, &outVal
					*out = make([]string, len(*in))
					copy(*out, *in)
				}
				(*out)[key] = outVal
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Role.
func (in *Role) DeepCopy() *Role {
	if in == nil {
		return nil
	}
	out := new(Role)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoleDefinition) DeepCopyInto(out *RoleDefinition) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Private != nil {
		in, out := &in.Private, &out.Private
		*out = new(bool)
		**out = **in
	}
	if in.Required != nil {
		in, out := &in.Required, &out.Required
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoleDefinition.
func (in *RoleDefinition) DeepCopy() *RoleDefinition {
	if in == nil {
		return nil
	}
	out := new(RoleDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RolePolicyRepresentation) DeepCopyInto(out *RolePolicyRepresentation) {
	*out = *in
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = new([]RoleDefinition)
		if **in != nil {
			in, out := *in, *out
			*out = make([]RoleDefinition, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RolePolicyRepresentation.
func (in *RolePolicyRepresentation) DeepCopy() *RolePolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(RolePolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScopeRepresentation) DeepCopyInto(out *ScopeRepresentation) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.IconURI != nil {
		in, out := &in.IconURI, &out.IconURI
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Policies != nil {
		in, out := &in.Policies, &out.Policies
		*out = new([]PolicyRepresentation)
		if **in != nil {
			in, out := *in, *out
			*out = make([]PolicyRepresentation, len(*in))
			for i := range *in {
				(*in)[i].DeepCopyInto(&(*out)[i])
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeRepresentation.
func (in *ScopeRepresentation) DeepCopy() *ScopeRepresentation {
	if in == nil {
		return nil
	}
	out := new(ScopeRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimePolicyRepresentation) DeepCopyInto(out *TimePolicyRepresentation) {
	*out = *in
	if in.NotBefore != nil {
		in, out := &in.NotBefore, &out.NotBefore
		*out = new(string)
		**out = **in
	}
	if in.NotOnOrAfter != nil {
		in, out := &in.NotOnOrAfter, &out.NotOnOrAfter
		*out = new(string)
		**out = **in
	}
	if in.DayMonth != nil {
		in, out := &in.DayMonth, &out.DayMonth
		*out = new(string)
		**out = **in
	}
	if in.DayMonthEnd != nil {
		in, out := &in.DayMonthEnd, &out.DayMonthEnd
		*out = new(string)
		**out = **in
	}
	if in.Month != nil {
		in, out := &in.Month, &out.Month
		*out = new(string)
		**out = **in
	}
	if in.MonthEnd != nil {
		in, out := &in.MonthEnd, &out.MonthEnd
		*out = new(string)
		**out = **in
	}
	if in.Year != nil {
		in, out := &in.Year, &out.Year
		*out = new(string)
		**out = **in
	}
	if in.YearEnd != nil {
		in, out := &in.YearEnd, &out.YearEnd
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(string)
		**out = **in
	}
	if in.HourEnd != nil {
		in, out := &in.HourEnd, &out.HourEnd
		*out = new(string)
		**out = **in
	}
	if in.Minute != nil {
		in, out := &in.Minute, &out.Minute
		*out = new(string)
		**out = **in
	}
	if in.MinuteEnd != nil {
		in, out := &in.MinuteEnd, &out.MinuteEnd
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimePolicyRepresentation.
func (in *TimePolicyRepresentation) DeepCopy() *TimePolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(TimePolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPolicyRepresentation) DeepCopyInto(out *UserPolicyRepresentation) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPolicyRepresentation.
func (in *UserPolicyRepresentation) DeepCopy() *UserPolicyRepresentation {
	if in == nil {
		return nil
	}
	out := new(UserPolicyRepresentation)
	in.DeepCopyInto(out)
	return out
}
