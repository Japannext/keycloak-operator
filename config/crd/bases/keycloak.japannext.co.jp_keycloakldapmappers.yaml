---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: keycloakldapmappers.keycloak.japannext.co.jp
spec:
  group: keycloak.japannext.co.jp
  names:
    categories:
    - keycloak
    kind: KeycloakLDAPMapper
    listKind: KeycloakLDAPMapperList
    plural: keycloakldapmappers
    shortNames:
    - kldapmapper
    singular: keycloakldapmapper
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: TYPE
      type: string
    - jsonPath: .status.resource.phase
      name: STATUS
      type: string
    - description: The last time the resource was changed
      jsonPath: .status.resource.lastChanged
      name: LAST CHANGED
      priority: 1
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: KeycloakLDAPMapper is the Schema for the keycloakldapmappers
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KeycloakLDAPMapperSpec defines the desired state of KeycloakLDAPMapper
            properties:
              certificateLdapMapper:
                properties:
                  alwaysReadValueFromLDAP:
                    default: false
                    type: boolean
                  attributeDefaultValue:
                    default: ""
                    type: string
                  isBinaryAttribute:
                    default: false
                    description: Should be true for binary LDAP attributes
                    type: boolean
                  isDERFormatted:
                    default: false
                    type: boolean
                  isMandatoryInLDAP:
                    default: false
                    description: If true, attribute is mandatory in LDAP. Hence if
                      there is no value in Keycloak DB, the default or empty value
                      will be set to be propagated to LDAP
                    type: boolean
                  ldapAttribute:
                    default: ""
                    type: string
                  readOnly:
                    default: true
                    type: boolean
                  userModelAttribute:
                    default: ""
                    type: string
                required:
                - alwaysReadValueFromLDAP
                - isBinaryAttribute
                - isDERFormatted
                - isMandatoryInLDAP
                - readOnly
                type: object
              endpoint:
                description: Select a KeycloakEndpoint
                properties:
                  kind:
                    default: KeycloakEndpoint
                    description: Kind of the resource representing a Keycloak endpoint
                    enum:
                    - KeycloakEndpoint
                    - KeycloakClusterEndpoint
                    type: string
                  name:
                    description: Name of the KeycloakEndpoint/KeycloakClusterEndpoint
                      resource
                    type: string
                type: object
              federation:
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              fullNameLdapMapper:
                properties:
                  ldapFullNameAttribute:
                    default: cn
                    type: string
                  readOnly:
                    default: true
                    type: boolean
                  writeOnly:
                    default: false
                    type: boolean
                required:
                - ldapFullNameAttribute
                - readOnly
                - writeOnly
                type: object
              groupLdapMapper:
                properties:
                  dropNonExistingGroupsDuringSync:
                    default: false
                    type: boolean
                  groupNameLdapAttribute:
                    default: cn
                    description: Name of LDAP attribute, which is used in group objects
                      for name and RDN of group. Usually it will be 'cn' . In this
                      case typical group/role object may have DN like 'cn=Group1,ou=groups,dc=example,dc=org'
                    type: string
                  groupObjectClasses:
                    default:
                    - group
                    description: Object class (or classes) of the group object. It's
                      divided by comma if more classes needed. In typical LDAP deployment
                      it could be 'groupOfNames' . In Active Directory it's usually
                      'group'
                    items:
                      type: string
                    type: array
                  groupsDn:
                    description: LDAP DN where are groups of this tree saved. For
                      example 'ou=groups,dc=example,dc=org'
                    type: string
                  groupsLdapFilter:
                    description: LDAP Filter adds additional custom filter to the
                      whole query for retrieve LDAP groups. Leave this empty if no
                      additional filtering is needed and you want to retrieve all
                      groups from LDAP. Otherwise make sure that filter starts with
                      '(' and ends with ')'
                    type: string
                  groupsPath:
                    default: /
                    description: Keycloak group path the LDAP groups are added to.
                      For example if value '/Applications/App1' is used, then LDAP
                      groups will be available in Keycloak under group 'App1', which
                      is child of top level group 'Applications'. The default value
                      is '/' so LDAP groups will be mapped to the Keycloak groups
                      at the top level. The configured group path must already exists
                      in the Keycloak when creating this mapper.
                    type: string
                  ignoreMissingGroups:
                    default: false
                    description: Ignore missing groups in the group hierarchy
                    type: boolean
                  memberofLdapAttribute:
                    default: ""
                    type: string
                  membershipAttributeType:
                    default: ""
                    type: string
                  membershipLdapAttribute:
                    default: ""
                    type: string
                  membershipUserLdapAttribute:
                    default: ""
                    type: string
                  mode:
                    default: READ_ONLY
                    description: LDAP_ONLY means that all group mappings of users
                      are retrieved from LDAP and saved into LDAP. READ_ONLY is Read-only
                      LDAP mode where group mappings are retrieved from both LDAP
                      and DB and merged together. New group joins are not saved to
                      LDAP but to DB. IMPORT is Read-only LDAP mode where group mappings
                      are retrieved from LDAP just at the time when user is imported
                      from LDAP and then they are saved to local keycloak DB.
                    enum:
                    - IMPORT
                    - LDAP_ONLY
                    - READ_ONLY
                    type: string
                  preserveGroupInheritance:
                    default: false
                    description: Flag whether group inheritance from LDAP should be
                      propagated to Keycloak. If false, then all LDAP groups will
                      be mapped as flat top-level groups in Keycloak. Otherwise group
                      inheritance is preserved into Keycloak, but the group sync might
                      fail if LDAP structure contains recursions or multiple parent
                      groups per child groups
                    type: boolean
                  userRolesRetrieveStrategy:
                    default: GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
                    description: Specify how to retrieve groups of user. LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                      means that roles of user will be retrieved by sending LDAP query
                      to retrieve all groups where 'member' is our user. GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
                      means that groups of user will be retrieved from 'memberOf'
                      attribute of our user. Or from the other attribute specified
                      by 'Member-Of LDAP Attribute'. LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY
                      is applicable just in Active Directory and it means that groups
                      of user will be retrieved recursively with usage of LDAP_MATCHING_RULE_IN_CHAIN
                      Ldap extension.
                    enum:
                    - GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
                    - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                    - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY
                    type: string
                required:
                - dropNonExistingGroupsDuringSync
                - groupsPath
                - ignoreMissingGroups
                - memberofLdapAttribute
                - membershipAttributeType
                - membershipLdapAttribute
                - membershipUserLdapAttribute
                - mode
                - preserveGroupInheritance
                - userRolesRetrieveStrategy
                type: object
              hardcodedAttributeMapper:
                properties:
                  attributeValue:
                    default: ""
                    description: Value of the model attribute, which will be added
                      when importing user from ldap
                    type: string
                  userModelAttributeName:
                    default: ""
                    description: Name of the model attribute, which will be added
                      when importing user from ldap
                    type: string
                type: object
              hardcodedLdapAttributeMapper:
                properties:
                  ldapAttributeName:
                    description: Name of the LDAP attribute, which will be added to
                      the new user during registration
                    type: string
                  ldapAttributeValue:
                    description: Value of the LDAP attribute, which will be added
                      to the new user during registration. You can either hardcode
                      any value like 'foo' but you can also use some special tokens.
                      Only supported token right now is '${RANDOM}' , which will be
                      replaced with some randomly generated String.
                    type: string
                required:
                - ldapAttributeName
                - ldapAttributeValue
                type: object
              hardcodedLdapGroupMapper:
                properties:
                  group:
                    description: Group to add the user in. Fill the full path of the
                      group including path. For example '/root-group/child-group'
                    type: string
                required:
                - group
                type: object
              hardcodedLdapRoleMapper:
                properties:
                  role:
                    description: Role to give to the user. For client roles, it should
                      be in the format `<clientID>.<role>`
                    type: string
                type: object
              msadUserAccountControlMapper:
                properties:
                  passwordPolicyHintsEnabled:
                    default: false
                    description: Applicable just for writable MSAD. If on, then updating
                      password of MSAD user will use LDAP_SERVER_POLICY_HINTS_OID
                      extension, which means that advanced MSAD password policies
                      like 'password history' or 'minimal password age' will be applied.
                      This extension works just for MSAD 2008 R2 or newer.
                    type: boolean
                required:
                - passwordPolicyHintsEnabled
                type: object
              name:
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              realm:
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              roleLdapMapper:
                properties:
                  memberofLdapAttribute:
                    default: memberOf
                    description: Used just when 'User Roles Retrieve Strategy' is
                      GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE. It specifies the name
                      of the LDAP attribute on the LDAP user, which contains the roles
                      (LDAP Groups), which the user is member of. Usually it will
                      be 'memberOf' and that's also the default value.
                    type: string
                  membershipAttributeType:
                    default: DN
                    enum:
                    - DN
                    - UID
                    type: string
                  membershipLdapAttribute:
                    default: ""
                    type: string
                  membershipUserLdapAttribute:
                    default: ""
                    type: string
                  mode:
                    default: READ_ONLY
                    description: LDAP_ONLY means that all role mappings are retrieved
                      from LDAP and saved into LDAP. READ_ONLY is Read-only LDAP mode
                      where role mappings are retrieved from both LDAP and DB and
                      merged together. New role grants are not saved to LDAP but to
                      DB. IMPORT is Read-only LDAP mode where role mappings are retrieved
                      from LDAP just at the time when user is imported from LDAP and
                      then they are saved to local keycloak DB.
                    enum:
                    - READ_ONLY
                    - IMPORT
                    - LDAP_ONLY
                    type: string
                  roleObjectClasses:
                    items:
                      type: string
                    type: array
                  rolesDn:
                    default: ""
                    type: string
                  useRealmRoleMapping:
                    default: true
                    description: If true, then LDAP role mappings will be mapped to
                      realm role mappings in Keycloak. Otherwise it will be mapped
                      to client role mappings
                    type: boolean
                  userRolesRetrieveStrategy:
                    default: LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                    description: Specify how to retrieve groups of user. LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                      means that roles of user will be retrieved by sending LDAP query
                      to retrieve all groups where 'member' is our user. GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
                      means that groups of user will be retrieved from 'memberOf'
                      attribute of our user. Or from the other attribute specified
                      by 'Member-Of LDAP Attribute'. LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY
                      is applicable just in Active Directory and it means that groups
                      of user will be retrieved recursively with usage of LDAP_MATCHING_RULE_IN_CHAIN
                      Ldap extension.
                    enum:
                    - GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
                    - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE
                    - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY
                    type: string
                required:
                - mode
                - useRealmRoleMapping
                - userRolesRetrieveStrategy
                type: object
              type:
                enum:
                - user-attribute-ldap-mapper
                - group-ldap-mapper
                - role-ldap-mapper
                type: string
                x-kubernetes-validations:
                - message: Value is immutable
                  rule: self == oldSelf
              userAttributeLdapMapper:
                properties:
                  alwaysReadValueFromLdap:
                    default: false
                    description: If on, then during reading of the LDAP attribute
                      value will always used instead of the value from Keycloak DB
                    type: boolean
                  attributeDefaultValue:
                    default: ""
                    description: If there is no value in Keycloak DB and attribute
                      is mandatory in LDAP, this value will be propagated to LDAP
                    type: string
                  isBinaryAttribute:
                    default: false
                    description: Should be true for binary LDAP attributes
                    type: boolean
                  isMandatoryInLdap:
                    default: false
                    description: If true, attribute is mandatory in LDAP. Hence if
                      there is no value in Keycloak DB, the default or empty value
                      will be set to be propagated to LDAP
                    type: boolean
                  ldapAttribute:
                    default: ""
                    description: Name of mapped attribute on LDAP object. For example
                      'cn', 'sn, 'mail', 'street' etc.
                    type: string
                  readOnly:
                    default: true
                    description: Read-only attribute is imported from LDAP to UserModel,
                      but it's not saved back to LDAP when user is updated in Keycloak.
                    type: boolean
                  userModelAttribute:
                    default: ""
                    description: Name of the UserModel property or attribute you want
                      to map the LDAP attribute into. For example 'firstName', 'lastName,
                      'email', 'street' etc.
                    type: string
                required:
                - alwaysReadValueFromLdap
                - attributeDefaultValue
                - isBinaryAttribute
                - isMandatoryInLdap
                - ldapAttribute
                - readOnly
                - userModelAttribute
                type: object
            required:
            - federation
            - name
            - realm
            - type
            type: object
          status:
            description: KeycloakLDAPMapperStatus defines the observed state of KeycloakLDAPMapper
            properties:
              componentID:
                description: ID of the component representing the managed LDAP mapper
                type: string
              federationID:
                description: ID of the LDAP Federation it belongs to
                type: string
              resource:
                description: The status of the keycloak resource
                properties:
                  lastChanged:
                    description: The time the resource was last updated.
                    format: date-time
                    type: string
                  phase:
                    description: Whether the resource is synced, not synced, failed
                      to sync, etc
                    type: string
                type: object
              result:
                description: Result of the last successful sync
                properties:
                  added:
                    type: integer
                  failed:
                    type: integer
                  ignored:
                    type: boolean
                  removed:
                    type: integer
                  status:
                    type: string
                  updated:
                    type: integer
                required:
                - added
                - failed
                - ignored
                - removed
                - status
                - updated
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
